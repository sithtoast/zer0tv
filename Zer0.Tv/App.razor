@using Microsoft.AspNetCore.Authentication
@using Zer0.Tv.Core.Auth

<CascadingAuthenticationState>
    <Router AppAssembly="@typeof(App).Assembly">
        <Found Context="routeData">
            <AuthorizeRouteView RouteData="@routeData" DefaultLayout="@typeof(MainLayout)">
                <NotAuthorized>
                    @{
                        var returnUrl = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
                        NavigationManager.NavigateTo($"login?redirectUri={returnUrl}", forceLoad: true);
                    }
                </NotAuthorized>
                <Authorizing>
                    Loading...
                </Authorizing>
            </AuthorizeRouteView>
        </Found>
        <NotFound>
            <PageTitle>Not found</PageTitle>
            <LayoutView Layout="@typeof(MainLayout)">
                <p role="alert">Sorry, there's nothing at this address.</p>
            </LayoutView>
        </NotFound>
    </Router>
</CascadingAuthenticationState>

@code {
    [Inject]
    public NavigationManager NavigationManager { get; set; }

    [Inject]
    public ITokenProvider TokenProvider { get; set; }

    [CascadingParameter]
    public HttpContext? HttpContext { get; set; }

    [Parameter]
    public string? AccessToken { get; set; }

    protected override async Task OnInitializedAsync()
    {
        TokenProvider.AccessToken = AccessToken;

        await base.OnInitializedAsync();
        return;
    }
}